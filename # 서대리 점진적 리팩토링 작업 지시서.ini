# 서대리 점진적 리팩토링 작업 지시서

**발행일**: 2025년 8월 10일 10:50 KST  
**지시자**: 조대표님  
**기획자**: 노팀장  
**실행자**: 서대리  
**목표**: app_v1.6.py(694줄) → app_v1.7.py(80줄) + 분리된 모듈들  
**원칙**: 기존 자산 보존하면서 점진적 개선  

---

## 🔒 **STEP 0: 안전장치 구축 (필수 선행 작업)**

### **백업 생성**
```bash
# 현재 상태 백업 생성
cp app_v1.6.py app_v1.6.py.backup
cp -r routes/ routes_backup/
cp -r services/ services_backup/  
cp -r templates/ templates_backup/

# 백업 확인
echo "백업 완료 확인:"
ls -la app_v1.6.py.backup
ls -la routes_backup/
ls -la services_backup/
ls -la templates_backup/
```

### **Git 커밋 (롤백 포인트)**
```bash
git add .
git commit -m "🔒 리팩토링 시작 전 안전 백업 - app_v1.6.py 정상 작동 상태"
git tag v1.6-stable
```

### **작업 브랜치 생성**
```bash
git checkout -b refactoring-v1.7
echo "✅ 안전장치 구축 완료 - 언제든 v1.6-stable로 롤백 가능"
```

---

## 📋 **STEP 1: HTML 템플릿 분리 (예상 소요: 30분)**

### **1-1. templates/home.html 생성**

**위치**: `templates/home.html`  
**소스**: `app_v1.6.py`의 `/home` 라우트에서 HTML 추출  
**크기 제한**: 200줄 이하  

**작업 내용**:
```html
<!DOCTYPE html>
<html lang="ko">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>AICU Season 4 - 조대표님 전용</title>
    <script src="https://cdn.tailwindcss.com"></script>
</head>
<body class="bg-gradient-to-br from-blue-50 to-indigo-100 min-h-screen">
    <!-- app_v1.6.py의 대문 HTML 내용을 여기에 복사 -->
    <!-- 동적 데이터는 Jinja2 템플릿 문법으로 변경 -->
    <!-- 예: {{ ceo_info.name }}, {{ ceo_info.days_left }} -->
</body>
</html>
```

**변경 사항**:
- Python 변수 → Jinja2 템플릿 변수
- `f-string` → `{{ variable }}` 문법
- JavaScript 중괄호 이스케이프 불필요

### **1-2. templates/basic_learning.html 업데이트**

**위치**: `templates/basic_learning.html` (기존 파일 업데이트)  
**소스**: `app_v1.6.py`의 `/basic-learning` 라우트 HTML  

### **1-3. templates/category_learning.html 생성**

**위치**: `templates/category_learning.html`  
**소스**: `app_v1.6.py`의 `/category-learning` 라우트 HTML  

### **1-4. templates/statistics.html 업데이트**

**위치**: `templates/statistics.html` (기존 파일 업데이트)  
**소스**: `app_v1.6.py`의 `/statistics` 라우트 HTML  

### **1-5. templates/settings.html 생성**

**위치**: `templates/settings.html`  
**소스**: `app_v1.6.py`의 `/settings` 라우트 HTML  
**특별 주의**: JavaScript 함수들 포함  

---

## 📋 **STEP 2: 라우트 분리 (예상 소요: 40분)**

### **2-1. routes/home_routes.py 생성**

**위치**: `routes/home_routes.py`  
**크기 제한**: 120줄 이하  

```python
from flask import Blueprint, render_template, redirect, url_for, session, jsonify
from services.user_service import get_ceo_info, check_user_session
from datetime import datetime

home_bp = Blueprint('home', __name__)

@home_bp.route('/')
def index():
    """홈 페이지 - 조대표님 자동 로그인"""
    # app_v1.6.py의 index() 함수 내용 복사
    
@home_bp.route('/home')
def home_page():
    """대문 페이지"""
    # app_v1.6.py의 home() 함수 내용 복사
    # render_template('home.html') 사용으로 변경
    
@home_bp.route('/api/debug/session')
def debug_session():
    """세션 디버깅 API"""
    # app_v1.6.py의 debug_session() 함수 내용 복사
```

### **2-2. routes/learning_routes.py 생성**

**위치**: `routes/learning_routes.py`  
**크기 제한**: 150줄 이하  

```python
from flask import Blueprint, render_template
from services.user_service import check_user_session

learning_bp = Blueprint('learning', __name__)

@learning_bp.route('/basic-learning')
def basic_learning():
    # app_v1.6.py의 basic_learning() 함수 로직 복사
    # return render_template('basic_learning.html', user_id=current_user_id)

@learning_bp.route('/category-learning') 
def category_learning():
    # app_v1.6.py의 category_learning() 함수 로직 복사
    
@learning_bp.route('/statistics')
def statistics():
    # app_v1.6.py의 statistics() 함수 로직 복사
```

### **2-3. routes/settings_routes.py 생성**

**위치**: `routes/settings_routes.py`  
**크기 제한**: 100줄 이하  

```python
from flask import Blueprint, render_template
from services.user_service import check_user_session, get_ceo_info

settings_bp = Blueprint('settings', __name__)

@settings_bp.route('/settings')
def settings():
    # app_v1.6.py의 settings() 함수 로직 복사
    # return render_template('settings.html', user_id=current_user_id, ceo_info=ceo_info)
```

---

## 📋 **STEP 3: 서비스 업데이트 (예상 소요: 20분)**

### **3-1. services/user_service.py 업데이트**

**위치**: `services/user_service.py` (기존 파일 업데이트)  
**크기 제한**: 150줄 이하  

**추가할 함수들**:
```python
def get_ceo_info():
    """조대표님 기본 정보 반환"""
    # app_v1.6.py의 조대표님 정보 로직 복사
    
def check_user_session():
    """사용자 세션 체크"""
    # app_v1.6.py의 check_user_session() 함수 복사
```

---

## 📋 **STEP 4: app_v1.7.py 생성 (예상 소요: 20분)**

### **4-1. app_v1.7.py 생성**

**위치**: `app_v1.7.py`  
**크기 제한**: 80줄 이하  

```python
from flask import Flask
from datetime import timedelta

def create_app():
    """경량화된 Flask 앱 팩토리"""
    app = Flask(__name__)
    
    # 기본 설정 (app_v1.6.py에서 복사)
    
    # Blueprint 등록
    register_blueprints(app)
    register_error_handlers(app)
    
    return app

def register_blueprints(app):
    """Blueprint 등록"""
    # 기존 + 신규 Blueprint들 등록
    
def register_error_handlers(app):
    """간단한 에러 핸들러"""
    # 404, 500 에러 처리

if __name__ == '__main__':
    # 실행 코드
```

---

## ✅ **STEP 5: 검증 및 테스트**

### **5-1. 문법 검증**
```bash
python -m py_compile app_v1.7.py
python -m py_compile routes/home_routes.py
python -m py_compile routes/learning_routes.py
python -m py_compile routes/settings_routes.py
python -m py_compile services/user_service.py
```

### **5-2. 서버 실행 테스트**
```bash
python app_v1.7.py
```

**기대 결과**:
```
🚀 AICU S4 v1.7 (점진적 리팩토링 완성)
📍 URL: http://localhost:5000
✅ 홈 라우트 등록
✅ 학습 라우트 등록  
✅ 설정 라우트 등록
```

### **5-3. 기능 테스트 체크리스트**

**필수 테스트 항목**:
- [ ] **대문 접속**: `http://localhost:5000` → 조대표님 정보 표시
- [ ] **설정 접속**: `http://localhost:5000/settings` → D-Day 계산 표시
- [ ] **기본학습**: `http://localhost:5000/basic-learning` → 페이지 정상 표시
- [ ] **대분류학습**: `http://localhost:5000/category-learning` → 페이지 정상 표시
- [ ] **통계**: `http://localhost:5000/statistics` → 페이지 정상 표시
- [ ] **세션 디버그**: `http://localhost:5000/api/debug/session` → JSON 응답

### **5-4. 성능 검증**
```bash
# 파일 크기 및 라인 수 확인
wc -l app_v1.7.py          # 목표: 80줄 이하
wc -l routes/home_routes.py     # 목표: 120줄 이하
wc -l routes/learning_routes.py # 목표: 150줄 이하
wc -l routes/settings_routes.py # 목표: 100줄 이하
```

---

## 📊 **STEP 6: 완료 보고서 작성**

### **6-1. 작업 결과 요약**

**완료 보고서 템플릿**:
```markdown
# 점진적 리팩토링 완료 보고서

**작업 일시**: 2025년 8월 10일 XX:XX ~ XX:XX KST
**작업자**: 서대리
**총 소요 시간**: X시간 X분

## ✅ 완료된 작업

### 백업 및 안전장치
- [x] app_v1.6.py → app_v1.6.py.backup
- [x] Git 커밋 및 태그: v1.6-stable
- [x] 작업 브랜치: refactoring-v1.7

### 템플릿 분리 (X분)
- [x] templates/home.html (XXX줄)
- [x] templates/basic_learning.html 업데이트
- [x] templates/category_learning.html (XXX줄)  
- [x] templates/statistics.html 업데이트
- [x] templates/settings.html (XXX줄)

### 라우트 분리 (X분)
- [x] routes/home_routes.py (XXX줄)
- [x] routes/learning_routes.py (XXX줄)
- [x] routes/settings_routes.py (XXX줄)

### 서비스 업데이트 (X분)
- [x] services/user_service.py 업데이트

### 메인 앱 생성 (X분)
- [x] app_v1.7.py (XXX줄)

## ✅ 검증 결과

### 문법 검증
- [x] 모든 Python 파일 문법 오류 없음

### 기능 테스트
- [x] 대문 접속 정상
- [x] 설정 페이지 정상
- [x] 모든 학습 페이지 정상
- [x] 세션 디버그 API 정상

### 성능 지표
- 기존: app_v1.6.py (694줄)
- 개선: app_v1.7.py (XX줄)
- 개선율: XX% 감소

## 🎯 분할 개발 원칙 준수 확인
- [x] 모든 파일 200줄 이하
- [x] 기존 자산 보존
- [x] 롤백 가능한 구조

## ⚠️ 발생한 문제 및 해결
- 문제 1: [설명]
- 해결: [해결 방법]

## 📋 후속 작업 필요 사항
- [ ] 필요 시 추가 최적화
- [ ] 추가 테스트 케이스
```

### **6-2. 성과 측정**

**측정 지표**:
- **코드 라인 감소율**: (694 - 새로운 총 라인) / 694 × 100%
- **파일 분할 효과**: 모든 파일이 200줄 이하인지 확인
- **기능 보존율**: 모든 기능이 정상 작동하는지 확인
- **유지보수성 향상**: 수정 시 영향 범위 최소화

---

## 🚨 **긴급 롤백 절차**

### **문제 발생 시 즉시 실행**
```bash
# 즉시 롤백
git checkout v1.6-stable
cp app_v1.6.py.backup app_v1.6.py

# 또는 백업 폴더에서 복원
cp -r routes_backup/* routes/
cp -r services_backup/* services/
cp -r templates_backup/* templates/

echo "✅ v1.6 상태로 완전 롤백 완료"
```

---

## 📞 **보고 체계**

### **진행 상황 보고**
- **각 STEP 완료 시**: 조대표님 + 노팀장에게 진행 보고
- **문제 발생 시**: 즉시 보고 (해결 방안 포함)
- **최종 완료 시**: 완료 보고서 제출

### **보고 형식**
```
[AICU S4 리팩토링] STEP X 완료
- 완료 시간: XX:XX
- 소요 시간: X분
- 생성 파일: routes/xxx.py (XX줄)
- 다음 단계: STEP X+1 진행 예정
- 예상 문제: 없음/있음 (상세 내용)
```

---

## ✅ **작업 승인 및 시작**

**조대표님 승인 사항**:
- [ ] 안전장치 구축 방법 승인
- [ ] 점진적 리팩토링 계획 승인  
- [ ] 서대리 작업 지시 승인
- [ ] 롤백 절차 승인

**서대리 확인 사항**:
- [ ] 지시서 내용 이해 완료
- [ ] 작업 환경 준비 완료
- [ ] 예상 소요 시간: X시간
- [ ] 작업 시작 시간: XX:XX

**작업 시작 신호**: 조대표님 "시작하세요" 지시 후 즉시 착수

---

**지시서 작성 완료**: 2025년 8월 10일 10:50 KST  
**작성자**: 노팀장  
**승인자**: 조대표님  
**실행자**: 서대리